/**
 * @fileoverview Firestore Security Rules for CourseForge.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and course interactions,
 * with an admin-controlled model for course creation and management.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owner.
 * - /courses/{courseId}: Stores course information, publicly readable but admin-modifiable.
 * - /users/{userId}/course_interactions/{interactionId}: Stores user-course interactions, owned by the user.
 * - /roles_admin/{userId}: Indicates admin status based on document existence.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Courses are publicly readable to facilitate open access to learning materials.
 * - Admin status is determined by presence in the /roles_admin collection for efficiency.
 *
 * Denormalization for Authorization:
 * - Course documents contain a `creatorId` field to simplify ownership checks for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (update, delete) - User attempts to modify or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (get, list) - Any user can read course information.
     * @allow (create) - Only admins can create courses. The creatorId field must match the admin's user ID.
     * @allow (update, delete) - Only admins who created the course can modify or delete it.
     * @deny (create, update, delete) - Non-admins attempt to create, modify, or delete courses.
     * @principle Public read access with owner-only writes.  Admin status is verified via document existence in /roles_admin.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to user-course interactions.
     * @path /users/{userId}/course_interactions/{interactionId}
     * @allow (create) - Authenticated user creates their own interaction.
     * @allow (get, list, update, delete) - Authenticated user accesses their own interactions.
     * @deny (create) - Unauthenticated user attempts to create an interaction.
     * @deny (update, delete) - User attempts to modify or delete another user's interaction.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/course_interactions/{interactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) - Only can be created by backend.
     * @allow (get) - Only admins can check membership.
     * @allow (delete) - Only can be deleted by backend.
     * @deny (list, update) - Not available for listing or updating.
     */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}