// This is an autogenerated file from Genkit, do not modify.
'use server';

/**
 * @fileOverview Provides course recommendations to users based on their viewing history and course descriptions.
 *
 * - recommendCourses - A function that suggests courses to a user.
 * - CourseRecommendationInput - The input type for the recommendCourses function.
 * - CourseRecommendationOutput - The return type for the recommendCourses function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CourseRecommendationInputSchema = z.object({
  userViewingHistory: z
    .array(z.string())
    .describe('An array of course IDs representing the user\'s viewing history.'),
  allCourses: z
    .array(z.object({
      id: z.string(),
      title: z.string(),
      description: z.string(),
    }))
    .describe('An array of all available courses with their IDs, titles, and descriptions.'),
  numberOfRecommendations: z
    .number()
    .min(1)
    .max(10)
    .default(3) // Providing a default value
    .describe('The maximum number of course recommendations to return.'),
});
export type CourseRecommendationInput = z.infer<
  typeof CourseRecommendationInputSchema
>;

const CourseRecommendationOutputSchema = z.object({
  recommendedCourseIds: z
    .array(z.string())
    .describe('An array of course IDs that are recommended for the user.'),
});
export type CourseRecommendationOutput = z.infer<
  typeof CourseRecommendationOutputSchema
>;

export async function recommendCourses(
  input: CourseRecommendationInput
): Promise<CourseRecommendationOutput> {
  return recommendCoursesFlow(input);
}

const recommendCoursesPrompt = ai.definePrompt({
  name: 'recommendCoursesPrompt',
  input: {schema: CourseRecommendationInputSchema},
  output: {schema: CourseRecommendationOutputSchema},
  prompt: `You are a course recommendation system.

  Based on a user's viewing history and a list of all available courses, you will suggest courses that the user might be interested in.

  User Viewing History:
  {{#if userViewingHistory}}
  {{#each userViewingHistory}}
  - {{{this}}}
  {{/each}}
  {{else}}
  No viewing history available.
  {{/if}}

  All Available Courses:
  {{#each allCourses}}
  - ID: {{{id}}}, Title: {{{title}}}, Description: {{{description}}}
  {{/each}}

  Please recommend up to {{numberOfRecommendations}} courses from the 'All Available Courses' that the user might be interested in, based on their viewing history. Only return the IDs of the recommended courses in the "recommendedCourseIds" field.
  Do not recommend courses that the user has already viewed.
  If there are no courses that the user might be interested in, return an empty array for "recommendedCourseIds".
  `,
});

const recommendCoursesFlow = ai.defineFlow(
  {
    name: 'recommendCoursesFlow',
    inputSchema: CourseRecommendationInputSchema,
    outputSchema: CourseRecommendationOutputSchema,
  },
  async input => {
    const {output} = await recommendCoursesPrompt(input);
    return output!;
  }
);
